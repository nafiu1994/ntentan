<?php
/* 
 * Ntentan PHP Framework
 * Copyright 2010 James Ekow Abaka Ainooson
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace ntentan\controllers;

use \ReflectionClass;
use \ReflectionObject;
use ntentan\Ntentan;
use ntentan\views\View;
use ntentan\models\Model;

/**
 * The Controller class represents the base class for all controllers that are
 * built for the ntentan framework. Controllers are used to direct the flow of
 * your application logic. They are stored in modules and they contain methods 
 * which are called from the url. Parameters to the methods are also passed 
 * through the URL. If a method is not specified, the default method is called.
 * The methods called by the controllers are expected to set data into variables
 * which are later rendered as output to the end user through views.
 *
 * @author  James Ekow Abaka Ainooson
 * @todo    Controllers must output data that can be passed to some kind of 
 *          template engine like smarty.
 */
class Controller
{
    /**
     * The name of the default method to execute when the controller is called 
     * without any action methods specified.
     * @var string
     */
    public $defaultMethodName = "run";

	/**
	 * A copy of the route that was used to load this controller.
	 * @var String
	 */
	public $route;

	/**
	 * A short machine readable name for this controller.
	 * @var string
	 */
	public $name;

    /**
     * The variables generated by any method called in this controller are
     * stored in this array. The values from this array would later be used
     * with the view classes to render the views.
     * @var Array
     */
    public $variables = array();
    
    /**
     * An array of the names of all the components loaded for use by this 
     * controller.
     * @var array
     */
    protected $components = array();

    /**
     * An array of the instances of the components loaded for use by this
     * controller.
     * @var array
     */
    private $componentInstances = array();

    /**
     * The instance of the view template which is going to be used to render 
     * the output of this controller.
     * @var View
     */
    public $viewInstance;
    
    /**
     * The instance of the model class which shares the same package or namespace
     * with this controller.
     * @var Model
     */
    private $modelInstance;
    
    /**
     * A route to the model of the default model this controller is liked to.
     * @var string
     */
    private $modelRoute;
    
    /**
     * Stores the data this controller holds for passing ot to the template. 
     * This data is stored as an associative array in this variable. The values 
     * can be manipulated through the Controller::set() method.
     * @var array
     */
    public $data;
    
    /**
     * The directory path to the file of this controller's class.
     * @var string
     */
    public $filePath;
    
    public $method;
    
    /**
     * An associative array which stores the blocks which have been loaded for
     * this controller.
     * @var array
     */
    protected $widgets = array();
    
    /**
     * Returns the name of the controller.
     * @return string
     */
    public function getName()
    {
        $object = new ReflectionObject($this);
        return $object->getName();
    }

    /**
     * Setter property
     * @param string $property
     * @param string $value
     */
    public function __set($property, $value)
    {
        switch($property)
        {
        case "layout":
            $this->view->layout = $value;
            break;
        }
    }

    public function __get($property)
    {
        switch ($property)
        {
        case "view":
            if($this->viewInstance == null)
            {
                $this->viewInstance = new View();
                $this->viewInstance->layout = "main";
                $this->viewInstance->defaultTemplatePath = $this->filePath;
            }
            return $this->viewInstance;

        case "layout":
            return $this->view->layout;
            
        case "model":
            if($this->modelInstance == null)
            {
                $this->modelInstance = Model::load($this->modelRoute);
            }
            return $this->modelInstance;
            
        case "directory":
            return Ntentan::$modulesPath . $this->route . "/";
            
        default:
            if(substr($property, -6) == "Widget")
            {
                $widget = Ntentan::deCamelize(substr($property, 0, strlen($property) - 6));
                return $this->widgets[$widget];
            }
            else if(substr($property, -9) == "Component")
            {
                $component = substr($property, 0, strlen($property) - 9);
                return $this->componentInstances[$component];
            }
        }
    }

    /**
     * Adds a component to the controller.
     * @param string $component Name of the component
     */
    public function addComponent()
    {
        $arguments = func_get_args();
        $component = array_shift($arguments);
        Ntentan::addIncludePath(Ntentan::getFilePath("lib/controllers/components/$component"));
        $componentName = "\\ntentan\\controllers\\components\\$component\\" . ucfirst($component);
        $componentClass = new ReflectionClass($componentName);
        $componentInstance = $componentClass->newInstanceArgs($arguments);
        $componentInstance->filePath = Ntentan::getFilePath("lib/controllers/components/$component");
        $componentInstance->setController($this);
        $componentInstance->init();
        $this->componentInstances[$component] = $componentInstance;
    }

    public function addWidget($widgetName, $alias = null)
    {
        $widgetFile = "widgets/$widgetName/" . Ntentan::camelize($widgetName) . "Widget.php";
        if(file_exists($widgetFile))
        {
            require_once $widgetFile;
            $widgetClass = "\\" . Ntentan::$modulesPath . "\\widgets\\$widgetName\\" . Ntentan::camelize($widgetName) . 'Widget';
            $path = "widgets/$widgetName";
        }
        else if(file_exists(Ntentan::getFilePath("lib/views/widgets/$widgetName/" . Ntentan::camelize($widgetName) . "Widget.php")))
        {
            Ntentan::addIncludePath(Ntentan::getFilePath("lib/views/widgets/$widgetName"));
            $widgetClass = "\\ntentan\\views\\widgets\\$widgetName\\" . Ntentan::camelize($widgetName) . 'Widget';
            $path = Ntentan::getFilePath("lib/views/widgets/$widgetName");
        }
        else
        {
            Ntentan::message("Widget <code><b>$widgetName</b></code> not found");
        }
        
        $widgetInstance = new $widgetClass();
        $widgetInstance->setName($widgetName);
        $widgetInstance->setFilePath($path);
        if($alias == null) $alias = $widgetName;
        $widgetInstance->setAlias($alias);
        $this->widgets[$alias] = $widgetInstance;
    }
    
    public function hasWidget($widgetName)
    {
        return isset($this->widgets[$widgetName]);
    }

    /**
     * 
     * @param mixed $params1
     * @param string $params2
     */
    protected function set($params1, $params2 = null)
    {
        if(is_array($params1))
        {
            $this->variables = array_merge($this->variables, $params1);
        }
        else
        {
            $this->variables[$params1] = $params2;
        }
    }
    
    /**
     * Appends a string to an already setup template variable.
     * @param string $params1
     * @param string $params2
     */
    protected function append($params1, $params2)
    {
        $this->variables[$params1] .= $params2;
    }

    protected function get()
    {
        return $this->variables;
    }

	/**
	 * A utility method to load a controller. This method loads the controller
	 * and fetches the contents of the controller into the Controller::$contents
	 * variable if the get_contents parameter is set to true on call. If a
     * controller doesn't exist in the module path, a ModelController is loaded
     * to help manipulate the contents of the model. If no model exists in that
     * location, it is asumed to be a package and a package controller is
     * loaded.
	 *
	 * @param $path 		The path for the model to be loaded.
	 * @return Controller
	 */
	public static function load($route)
	{
        $controllerRoute = '';
        $controllerRouteArray = explode('/', $route);

        // Filter out all empty route entries from the query
        foreach($controllerRouteArray as $value)
        {
            if($value == "") continue;
            $routeArray[] = $value;
        }
        
        // Loop through the filtered path and extract the controller class
		for($i = 0; $i<count($routeArray); $i++)
		{
			$p = $routeArray[$i];
            $pCamelized = Ntentan::camelize($p);
            $filePath = Ntentan::$modulesPath . "$controllerRoute/$p/";
			if(file_exists($filePath . "{$pCamelized}Controller.php"))
			{
				$controllerName = $pCamelized."Controller";
				$controllerRoute .= "/$p";
                $modelRoute .= "$p";
				break;
			}
			else
			{
				$controllerRoute .= "/$p";
                $modelRoute .= "$p.";
			}
		}

        $controllerRoute = substr($controllerRoute,1);

        if($controllerName == "")
        {
            Ntentan::error("Path not found! [$route]");
        }
        else
        {
            Ntentan::addIncludePath(Ntentan::$modulesPath . "/$controllerRoute/"); //$controllerName.php";
            $controllerNamespace = "\\" . str_replace("/", "\\", Ntentan::$modulesPath . "/$controllerRoute/");
            $controllerName = $controllerNamespace . $controllerName;
            if(class_exists($controllerName))
            {
                $controller = new $controllerName();
                foreach($controller->components as $component)
                {
                    $controller->addComponent($component);
                }
            }
            else
            {
            	Ntentan::error("Controller class <b><code>$controllerName</code></b> not found.");
            }
            if($i != count($routeArray)-1)
            {
                $controller->method = $routeArray[$i+1];
            }
            else
            {
                $controller->method = $controller->defaultMethodName;
            }
            
            $controller->init();
            $controller->setRoute($controllerRoute);
            $controller->setName($controllerName);
            $controller->modelRoute = $modelRoute;
            $controller->filePath = $filePath;
            if($controller->hasMethod())
            {
                $ret = $controller->runMethod(array_slice($routeArray,$i+2));
            }
            else
            {
                echo Ntentan::message("Method not found <code><b>$controllerName::{$controller->method}()</b></code>");
                die();
            }
        }
	}
    
	/**
	 * Set the name of this controller
	 * @param string $name
	 */
    public function setName($name)
    {
        $this->name = $name;
        foreach($this->componentInstances as $component)
        {
            $component->setControllerName($name);
        }
    }

    /**
     * Set the value of the route used to load this controller. 
     * @param string $route
     */
    public function setRoute($route)
    {
        $this->route = $route;
        foreach($this->componentInstances as $component)
        {
            $component->setControllerRoute($route);
        }
    }

    /**
     * Returns true if this controller has the requested method and returns
     * false otherwise.
     * @param string $method
     * @return booleam
     */
    public function hasMethod($method = null)
    {
        $ret = false;
        $path = $method === null ? $this->method : $method;
        if(method_exists($this, $path))
        {
            $ret = true;
        }
        else
        {
            foreach($this->componentInstances as $component)
            {
                $ret = $component->hasMethod($path);
                if($ret)
                {
                    break;
                }
            }
        }
        return $ret;
    }

    public function setView($view)
    {
        $this->viewInstance = $view;
    }

    public function runMethod($params, $method = null)
    {
        $path = $method === null ? $this->method : $method;
        if(method_exists($this, $path))
        {
            $this->mainPreRender();
            $controllerClass = new ReflectionClass($this->getName());
            $method = $controllerClass->GetMethod($path);
            $this->view->template = Ntentan::$modulesPath . "/{$this->route}/$path.tpl.php";
            $method->invokeArgs($this, $params);
            $this->view->widgets = $this->widgets;
            $ret = $this->view->out($this->get());
            $this->mainPostRender();
        }
        else
        {
            foreach($this->componentInstances as $component)
            {
                if($component->hasMethod($path))
                {
                    $component->variables = $this->variables;
                    $component->widgets = $this->widgets;
                    $component->runMethod($params, $path);
                }
            }
        }
        echo $ret;
    }

    public function mainPreRender()
    {
        foreach($this->componentInstances as $component)
        {
            $component->preRender();
        }
        $this->preRender();
    }

    public function mainPostRender()
    {
        foreach($this->componentInstances as $component)
        {
            $component->postRender();
        }
        $this->postRender();
    }

    public function preRender()
    {

    }

    /**
     * 
     */
    public function postRender()
    {
        
    }

    /**
     * Checks whether this controller has a particular component loaded.
     * @param string $component
     * @return boolean
     */
    public function hasComponent($component)
    {
        if(array_search($component, $this->components) !== false)
        {
            return true;        
        }
        else
        {
            return false;
        }
    }

    /**
     * Function called automatically after the controller is initialized. This
     * method should be overriden by controllers which want to initialize
     * certain variables after the constructor function is called.
     */
    public function init()
    {
        
    }
}
